; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter, extra scripting
;   Upload options: custom port, speed and extra flags
;   Library options: dependencies, extra library storages
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
description = Router program
default_envs = basic
src_dir = ./

[common]
build_flags =
    -std=c++17
    -std=gnu++17

build_unflags =
    -std=c++11
    -std=gnu++11

check_tool = cppcheck, clangtidy
check_flags =
    cppcheck: --enable=all --std=c++17 --suppress=missingIncludeSystem
    clangtidy: --fix --extra-arg=-std=c++17 --checks=*,-llvmlibc-callee-namespace,-llvmlibc-implementation-in-namespace,-clang-diagnostic-c++17-extensions,-llvm-header-guard
check_skip_packages = yes
check_src_filters = +<*>
monitor_filters =
    default   ; Remove typical terminal control codes from input
    time      ; Add timestamp with milliseconds for each new line
    log2file  ; Log data to a file “platformio-device-monitor-*.log” located in the current working directory

[env]
platform = atmelavr
framework = arduino
board = uno
test_framework = unity
extra_scripts = pre:inject_sketch_name.py

[env:basic]
build_src_filter =
    ${env.build_src_filter}
    -<test/>
; Build options
build_flags =
    ${common.build_flags}
build_unflags =
    ${common.build_unflags}
  
[env:basic_debug]
extends = env:basic
build_type = debug

[env:temperature]
extends = env:basic
build_src_flags =
    -DTEMP_ENABLED
lib_deps =
    paulstoffregen/OneWire @ ^2.3.7

[env:emonesp]
extends = env:basic
build_src_flags =
    -DEMONESP

[env:emonesp_temperature]
extends = env:temperature
build_src_flags =
    ${env:temperature.build_src_flags}
    -DEMONESP

[env:rf]
extends = env:basic
build_src_flags =
    -DRF_PRESENT
lib_deps =
    JeeLib
